
Hayoung1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002128  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a70  08004a70  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a70  08004a70  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  2000001c  08004a94  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08004a94  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007949  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001883  00000000  00000000  0002798d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00029210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  000299e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa5  00000000  00000000  0002a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a69e  00000000  00000000  00042b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0ab  00000000  00000000  0004d21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d92c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  000d9318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002930 	.word	0x08002930

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08002930 	.word	0x08002930

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd8d 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f897 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f937 	bl	80004a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f8f5 	bl	8000420 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000236:	f000 f9db 	bl	80005f0 <SSD1306_Init>
   char snum[5];

   SSD1306_GotoXY (0,0);
 800023a:	2100      	movs	r1, #0
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fb57 	bl	80008f0 <SSD1306_GotoXY>
   SSD1306_Puts ("Hayoung", &Font_11x18, 1);
 8000242:	493e      	ldr	r1, [pc, #248]	; (800033c <main+0x11c>)
 8000244:	4b3e      	ldr	r3, [pc, #248]	; (8000340 <main+0x120>)
 8000246:	2201      	movs	r2, #1
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fbeb 	bl	8000a24 <SSD1306_Puts>
   SSD1306_GotoXY (0, 30);
 800024e:	211e      	movs	r1, #30
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fb4d 	bl	80008f0 <SSD1306_GotoXY>
   SSD1306_Puts ("Hibban", &Font_11x18, 1);
 8000256:	4939      	ldr	r1, [pc, #228]	; (800033c <main+0x11c>)
 8000258:	4b3a      	ldr	r3, [pc, #232]	; (8000344 <main+0x124>)
 800025a:	2201      	movs	r2, #1
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fbe1 	bl	8000a24 <SSD1306_Puts>
   SSD1306_UpdateScreen();
 8000262:	f000 fa89 	bl	8000778 <SSD1306_UpdateScreen>
   HAL_Delay (1000);
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fdce 	bl	8000e0c <HAL_Delay>

   SSD1306_ScrollRight(0,7);
 8000270:	2107      	movs	r1, #7
 8000272:	2000      	movs	r0, #0
 8000274:	f000 f93f 	bl	80004f6 <SSD1306_ScrollRight>
   HAL_Delay(3000);
 8000278:	4b33      	ldr	r3, [pc, #204]	; (8000348 <main+0x128>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fdc6 	bl	8000e0c <HAL_Delay>
   SSD1306_ScrollLeft(0,7);
 8000280:	2107      	movs	r1, #7
 8000282:	2000      	movs	r0, #0
 8000284:	f000 f970 	bl	8000568 <SSD1306_ScrollLeft>
   HAL_Delay(3000);
 8000288:	4b2f      	ldr	r3, [pc, #188]	; (8000348 <main+0x128>)
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fdbe 	bl	8000e0c <HAL_Delay>
   SSD1306_Stopscroll();
 8000290:	f000 f9a3 	bl	80005da <SSD1306_Stopscroll>
   SSD1306_Clear();
 8000294:	f000 fbec 	bl	8000a70 <SSD1306_Clear>
   SSD1306_GotoXY (35,0);
 8000298:	2100      	movs	r1, #0
 800029a:	2023      	movs	r0, #35	; 0x23
 800029c:	f000 fb28 	bl	80008f0 <SSD1306_GotoXY>
   SSD1306_Puts ("SCORE", &Font_11x18, 1);
 80002a0:	4926      	ldr	r1, [pc, #152]	; (800033c <main+0x11c>)
 80002a2:	4b2a      	ldr	r3, [pc, #168]	; (800034c <main+0x12c>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fbbc 	bl	8000a24 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
    {
  	for ( int x = 1; x <= 10000 ; x++ )
 80002ac:	2301      	movs	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e03f      	b.n	8000332 <main+0x112>
  	{
  		itoa(x, snum, 10);
 80002b2:	1d39      	adds	r1, r7, #4
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	220a      	movs	r2, #10
 80002b8:	0018      	movs	r0, r3
 80002ba:	f002 faed 	bl	8002898 <itoa>
  		SSD1306_GotoXY (0, 30);
 80002be:	211e      	movs	r1, #30
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fb15 	bl	80008f0 <SSD1306_GotoXY>
  		SSD1306_Puts ("             ", &Font_16x26, 1);
 80002c6:	4922      	ldr	r1, [pc, #136]	; (8000350 <main+0x130>)
 80002c8:	4b22      	ldr	r3, [pc, #136]	; (8000354 <main+0x134>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fba9 	bl	8000a24 <SSD1306_Puts>
  		SSD1306_UpdateScreen();
 80002d2:	f000 fa51 	bl	8000778 <SSD1306_UpdateScreen>
  		if(x < 10) {
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2b09      	cmp	r3, #9
 80002da:	dc04      	bgt.n	80002e6 <main+0xc6>
  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 80002dc:	211e      	movs	r1, #30
 80002de:	2035      	movs	r0, #53	; 0x35
 80002e0:	f000 fb06 	bl	80008f0 <SSD1306_GotoXY>
 80002e4:	e015      	b.n	8000312 <main+0xf2>
  		}
  		else if (x < 100 ) {
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b63      	cmp	r3, #99	; 0x63
 80002ea:	dc04      	bgt.n	80002f6 <main+0xd6>
  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 80002ec:	211e      	movs	r1, #30
 80002ee:	202d      	movs	r0, #45	; 0x2d
 80002f0:	f000 fafe 	bl	80008f0 <SSD1306_GotoXY>
 80002f4:	e00d      	b.n	8000312 <main+0xf2>
  		}
  		else if (x < 1000 ) {
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	23fa      	movs	r3, #250	; 0xfa
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	429a      	cmp	r2, r3
 80002fe:	da04      	bge.n	800030a <main+0xea>
  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8000300:	211e      	movs	r1, #30
 8000302:	2025      	movs	r0, #37	; 0x25
 8000304:	f000 faf4 	bl	80008f0 <SSD1306_GotoXY>
 8000308:	e003      	b.n	8000312 <main+0xf2>
  		}
  		else {
  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 800030a:	211e      	movs	r1, #30
 800030c:	201e      	movs	r0, #30
 800030e:	f000 faef 	bl	80008f0 <SSD1306_GotoXY>
  		}
  		SSD1306_Puts (snum, &Font_16x26, 1);
 8000312:	490f      	ldr	r1, [pc, #60]	; (8000350 <main+0x130>)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2201      	movs	r2, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fb83 	bl	8000a24 <SSD1306_Puts>
  		SSD1306_UpdateScreen();
 800031e:	f000 fa2b 	bl	8000778 <SSD1306_UpdateScreen>
  		HAL_Delay (500);
 8000322:	23fa      	movs	r3, #250	; 0xfa
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fd70 	bl	8000e0c <HAL_Delay>
  	for ( int x = 1; x <= 10000 ; x++ )
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3301      	adds	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <main+0x138>)
 8000336:	4293      	cmp	r3, r2
 8000338:	ddbb      	ble.n	80002b2 <main+0x92>
 800033a:	e7b7      	b.n	80002ac <main+0x8c>
 800033c:	20000000 	.word	0x20000000
 8000340:	08002948 	.word	0x08002948
 8000344:	08002950 	.word	0x08002950
 8000348:	00000bb8 	.word	0x00000bb8
 800034c:	08002958 	.word	0x08002958
 8000350:	20000008 	.word	0x20000008
 8000354:	08002960 	.word	0x08002960
 8000358:	00002710 	.word	0x00002710

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b099      	sub	sp, #100	; 0x64
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	242c      	movs	r4, #44	; 0x2c
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	2334      	movs	r3, #52	; 0x34
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fa97 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000372:	231c      	movs	r3, #28
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2310      	movs	r3, #16
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fa8f 	bl	80028a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	231c      	movs	r3, #28
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 fa88 	bl	80028a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2210      	movs	r2, #16
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2202      	movs	r2, #2
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0212      	lsls	r2, r2, #8
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0352      	lsls	r2, r2, #13
 80003b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fc4e 	bl	8001c64 <HAL_RCC_OscConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003cc:	f000 f88e 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	211c      	movs	r1, #28
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2101      	movs	r1, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 ffbe 	bl	8002370 <HAL_RCC_ClockConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003f8:	f000 f878 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2220      	movs	r2, #32
 8000400:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000402:	003b      	movs	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000408:	003b      	movs	r3, r7
 800040a:	0018      	movs	r0, r3
 800040c:	f002 f90a 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000414:	f000 f86a 	bl	80004ec <Error_Handler>
  }
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b019      	add	sp, #100	; 0x64
 800041e:	bd90      	pop	{r4, r7, pc}

08000420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_I2C1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MX_I2C1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_I2C1_Init+0x74>)
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <MX_I2C1_Init+0x7c>)
 800042e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_I2C1_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_I2C1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x74>)
 800045c:	0018      	movs	r0, r3
 800045e:	f000 ff25 	bl	80012ac <HAL_I2C_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000466:	f000 f841 	bl	80004ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x74>)
 800046c:	2100      	movs	r1, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fb60 	bl	8001b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000478:	f000 f838 	bl	80004ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <MX_I2C1_Init+0x74>)
 800047e:	2100      	movs	r1, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fba3 	bl	8001bcc <HAL_I2CEx_ConfigDigitalFilter>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 f82f 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000038 	.word	0x20000038
 8000498:	40005400 	.word	0x40005400
 800049c:	0000020b 	.word	0x0000020b

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	02c9      	lsls	r1, r1, #11
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <MX_GPIO_Init+0x48>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	02db      	lsls	r3, r3, #11
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>

080004f6 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	0002      	movs	r2, r0
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	1c0a      	adds	r2, r1, #0
 8000506:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000508:	2226      	movs	r2, #38	; 0x26
 800050a:	2100      	movs	r1, #0
 800050c:	2078      	movs	r0, #120	; 0x78
 800050e:	f000 fb39 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2078      	movs	r0, #120	; 0x78
 8000518:	f000 fb34 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	2078      	movs	r0, #120	; 0x78
 8000526:	f000 fb2d 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2078      	movs	r0, #120	; 0x78
 8000530:	f000 fb28 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	2078      	movs	r0, #120	; 0x78
 800053e:	f000 fb21 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2078      	movs	r0, #120	; 0x78
 8000548:	f000 fb1c 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	2100      	movs	r1, #0
 8000550:	2078      	movs	r0, #120	; 0x78
 8000552:	f000 fb17 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000556:	222f      	movs	r2, #47	; 0x2f
 8000558:	2100      	movs	r1, #0
 800055a:	2078      	movs	r0, #120	; 0x78
 800055c:	f000 fb12 	bl	8000b84 <ssd1306_I2C_Write>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}

08000568 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	1c0a      	adds	r2, r1, #0
 8000578:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800057a:	2227      	movs	r2, #39	; 0x27
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fb00 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fafb 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	; 0x78
 8000598:	f000 faf4 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 faef 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	2078      	movs	r0, #120	; 0x78
 80005b0:	f000 fae8 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2078      	movs	r0, #120	; 0x78
 80005ba:	f000 fae3 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80005be:	22ff      	movs	r2, #255	; 0xff
 80005c0:	2100      	movs	r1, #0
 80005c2:	2078      	movs	r0, #120	; 0x78
 80005c4:	f000 fade 	bl	8000b84 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80005c8:	222f      	movs	r2, #47	; 0x2f
 80005ca:	2100      	movs	r1, #0
 80005cc:	2078      	movs	r0, #120	; 0x78
 80005ce:	f000 fad9 	bl	8000b84 <ssd1306_I2C_Write>
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}

080005da <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80005de:	222e      	movs	r2, #46	; 0x2e
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 face 	bl	8000b84 <ssd1306_I2C_Write>
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005f6:	f000 fa45 	bl	8000a84 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005fa:	4b5b      	ldr	r3, [pc, #364]	; (8000768 <SSD1306_Init+0x178>)
 80005fc:	485b      	ldr	r0, [pc, #364]	; (800076c <SSD1306_Init+0x17c>)
 80005fe:	2201      	movs	r2, #1
 8000600:	2178      	movs	r1, #120	; 0x78
 8000602:	f000 fff1 	bl	80015e8 <HAL_I2C_IsDeviceReady>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800060a:	2300      	movs	r3, #0
 800060c:	e0a8      	b.n	8000760 <SSD1306_Init+0x170>
	}

	/* A little delay */
	uint32_t p = 2500;
 800060e:	4b58      	ldr	r3, [pc, #352]	; (8000770 <SSD1306_Init+0x180>)
 8000610:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000612:	e002      	b.n	800061a <SSD1306_Init+0x2a>
		p--;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
	while(p>0)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f9      	bne.n	8000614 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000620:	22ae      	movs	r2, #174	; 0xae
 8000622:	2100      	movs	r1, #0
 8000624:	2078      	movs	r0, #120	; 0x78
 8000626:	f000 faad 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	2078      	movs	r0, #120	; 0x78
 8000630:	f000 faa8 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000634:	2210      	movs	r2, #16
 8000636:	2100      	movs	r1, #0
 8000638:	2078      	movs	r0, #120	; 0x78
 800063a:	f000 faa3 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800063e:	22b0      	movs	r2, #176	; 0xb0
 8000640:	2100      	movs	r1, #0
 8000642:	2078      	movs	r0, #120	; 0x78
 8000644:	f000 fa9e 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	2100      	movs	r1, #0
 800064c:	2078      	movs	r0, #120	; 0x78
 800064e:	f000 fa99 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2078      	movs	r0, #120	; 0x78
 8000658:	f000 fa94 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800065c:	2210      	movs	r2, #16
 800065e:	2100      	movs	r1, #0
 8000660:	2078      	movs	r0, #120	; 0x78
 8000662:	f000 fa8f 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 fa8a 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000670:	2281      	movs	r2, #129	; 0x81
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 fa85 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 fa80 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000684:	22a1      	movs	r2, #161	; 0xa1
 8000686:	2100      	movs	r1, #0
 8000688:	2078      	movs	r0, #120	; 0x78
 800068a:	f000 fa7b 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800068e:	22a6      	movs	r2, #166	; 0xa6
 8000690:	2100      	movs	r1, #0
 8000692:	2078      	movs	r0, #120	; 0x78
 8000694:	f000 fa76 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000698:	22a8      	movs	r2, #168	; 0xa8
 800069a:	2100      	movs	r1, #0
 800069c:	2078      	movs	r0, #120	; 0x78
 800069e:	f000 fa71 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006a2:	223f      	movs	r2, #63	; 0x3f
 80006a4:	2100      	movs	r1, #0
 80006a6:	2078      	movs	r0, #120	; 0x78
 80006a8:	f000 fa6c 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006ac:	22a4      	movs	r2, #164	; 0xa4
 80006ae:	2100      	movs	r1, #0
 80006b0:	2078      	movs	r0, #120	; 0x78
 80006b2:	f000 fa67 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80006b6:	22d3      	movs	r2, #211	; 0xd3
 80006b8:	2100      	movs	r1, #0
 80006ba:	2078      	movs	r0, #120	; 0x78
 80006bc:	f000 fa62 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2078      	movs	r0, #120	; 0x78
 80006c6:	f000 fa5d 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80006ca:	22d5      	movs	r2, #213	; 0xd5
 80006cc:	2100      	movs	r1, #0
 80006ce:	2078      	movs	r0, #120	; 0x78
 80006d0:	f000 fa58 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80006d4:	22f0      	movs	r2, #240	; 0xf0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2078      	movs	r0, #120	; 0x78
 80006da:	f000 fa53 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006de:	22d9      	movs	r2, #217	; 0xd9
 80006e0:	2100      	movs	r1, #0
 80006e2:	2078      	movs	r0, #120	; 0x78
 80006e4:	f000 fa4e 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006e8:	2222      	movs	r2, #34	; 0x22
 80006ea:	2100      	movs	r1, #0
 80006ec:	2078      	movs	r0, #120	; 0x78
 80006ee:	f000 fa49 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006f2:	22da      	movs	r2, #218	; 0xda
 80006f4:	2100      	movs	r1, #0
 80006f6:	2078      	movs	r0, #120	; 0x78
 80006f8:	f000 fa44 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006fc:	2212      	movs	r2, #18
 80006fe:	2100      	movs	r1, #0
 8000700:	2078      	movs	r0, #120	; 0x78
 8000702:	f000 fa3f 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000706:	22db      	movs	r2, #219	; 0xdb
 8000708:	2100      	movs	r1, #0
 800070a:	2078      	movs	r0, #120	; 0x78
 800070c:	f000 fa3a 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	2078      	movs	r0, #120	; 0x78
 8000716:	f000 fa35 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800071a:	228d      	movs	r2, #141	; 0x8d
 800071c:	2100      	movs	r1, #0
 800071e:	2078      	movs	r0, #120	; 0x78
 8000720:	f000 fa30 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000724:	2214      	movs	r2, #20
 8000726:	2100      	movs	r1, #0
 8000728:	2078      	movs	r0, #120	; 0x78
 800072a:	f000 fa2b 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800072e:	22af      	movs	r2, #175	; 0xaf
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 fa26 	bl	8000b84 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000738:	222e      	movs	r2, #46	; 0x2e
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 fa21 	bl	8000b84 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f84c 	bl	80007e0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000748:	f000 f816 	bl	8000778 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <SSD1306_Init+0x184>)
 800074e:	2200      	movs	r2, #0
 8000750:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <SSD1306_Init+0x184>)
 8000754:	2200      	movs	r2, #0
 8000756:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <SSD1306_Init+0x184>)
 800075a:	2201      	movs	r2, #1
 800075c:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800075e:	2301      	movs	r3, #1
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}
 8000768:	00004e20 	.word	0x00004e20
 800076c:	20000038 	.word	0x20000038
 8000770:	000009c4 	.word	0x000009c4
 8000774:	20000484 	.word	0x20000484

08000778 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e021      	b.n	80007ca <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3b50      	subs	r3, #80	; 0x50
 800078c:	b2db      	uxtb	r3, r3
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	2078      	movs	r0, #120	; 0x78
 8000794:	f000 f9f6 	bl	8000b84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f000 f9f1 	bl	8000b84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007a2:	2210      	movs	r2, #16
 80007a4:	2100      	movs	r1, #0
 80007a6:	2078      	movs	r0, #120	; 0x78
 80007a8:	f000 f9ec 	bl	8000b84 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	01da      	lsls	r2, r3, #7
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <SSD1306_UpdateScreen+0x64>)
 80007b4:	18d2      	adds	r2, r2, r3
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	2078      	movs	r0, #120	; 0x78
 80007bc:	f000 f976 	bl	8000aac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	3201      	adds	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d9d9      	bls.n	8000786 <SSD1306_UpdateScreen+0xe>
	}
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000084 	.word	0x20000084

080007e0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <SSD1306_Fill+0x18>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e000      	b.n	80007fa <SSD1306_Fill+0x1a>
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <SSD1306_Fill+0x30>)
 8000800:	0019      	movs	r1, r3
 8000802:	f002 f84d 	bl	80028a0 <memset>
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000084 	.word	0x20000084

08000814 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	0004      	movs	r4, r0
 800081c:	0008      	movs	r0, r1
 800081e:	0011      	movs	r1, r2
 8000820:	1dbb      	adds	r3, r7, #6
 8000822:	1c22      	adds	r2, r4, #0
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	1c02      	adds	r2, r0, #0
 800082a:	801a      	strh	r2, [r3, #0]
 800082c:	1cfb      	adds	r3, r7, #3
 800082e:	1c0a      	adds	r2, r1, #0
 8000830:	701a      	strb	r2, [r3, #0]
	if (
 8000832:	1dbb      	adds	r3, r7, #6
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	2b7f      	cmp	r3, #127	; 0x7f
 8000838:	d852      	bhi.n	80008e0 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	2b3f      	cmp	r3, #63	; 0x3f
 8000840:	d84e      	bhi.n	80008e0 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SSD1306_DrawPixel+0xd4>)
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 800084a:	1cfb      	adds	r3, r7, #3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	425a      	negs	r2, r3
 8000850:	4153      	adcs	r3, r2
 8000852:	b2da      	uxtb	r2, r3
 8000854:	1cfb      	adds	r3, r7, #3
 8000856:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000858:	1cfb      	adds	r3, r7, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d11e      	bne.n	800089e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	b298      	uxth	r0, r3
 800086c:	0003      	movs	r3, r0
 800086e:	01db      	lsls	r3, r3, #7
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <SSD1306_DrawPixel+0xd8>)
 8000874:	5cd3      	ldrb	r3, [r2, r3]
 8000876:	b25a      	sxtb	r2, r3
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2107      	movs	r1, #7
 800087e:	400b      	ands	r3, r1
 8000880:	2101      	movs	r1, #1
 8000882:	4099      	lsls	r1, r3
 8000884:	000b      	movs	r3, r1
 8000886:	b25b      	sxtb	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b259      	sxtb	r1, r3
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	0003      	movs	r3, r0
 8000892:	01db      	lsls	r3, r3, #7
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	b2c9      	uxtb	r1, r1
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <SSD1306_DrawPixel+0xd8>)
 800089a:	54d1      	strb	r1, [r2, r3]
 800089c:	e021      	b.n	80008e2 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	881a      	ldrh	r2, [r3, #0]
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	b298      	uxth	r0, r3
 80008aa:	0003      	movs	r3, r0
 80008ac:	01db      	lsls	r3, r3, #7
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <SSD1306_DrawPixel+0xd8>)
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	8812      	ldrh	r2, [r2, #0]
 80008ba:	2107      	movs	r1, #7
 80008bc:	400a      	ands	r2, r1
 80008be:	2101      	movs	r1, #1
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	b252      	sxtb	r2, r2
 80008c6:	43d2      	mvns	r2, r2
 80008c8:	b252      	sxtb	r2, r2
 80008ca:	4013      	ands	r3, r2
 80008cc:	b259      	sxtb	r1, r3
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	881a      	ldrh	r2, [r3, #0]
 80008d2:	0003      	movs	r3, r0
 80008d4:	01db      	lsls	r3, r3, #7
 80008d6:	18d3      	adds	r3, r2, r3
 80008d8:	b2c9      	uxtb	r1, r1
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <SSD1306_DrawPixel+0xd8>)
 80008dc:	54d1      	strb	r1, [r2, r3]
 80008de:	e000      	b.n	80008e2 <SSD1306_DrawPixel+0xce>
		return;
 80008e0:	46c0      	nop			; (mov r8, r8)
	}
}
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b003      	add	sp, #12
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	20000484 	.word	0x20000484
 80008ec:	20000084 	.word	0x20000084

080008f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	801a      	strh	r2, [r3, #0]
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <SSD1306_GotoXY+0x2c>)
 8000904:	1dba      	adds	r2, r7, #6
 8000906:	8812      	ldrh	r2, [r2, #0]
 8000908:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <SSD1306_GotoXY+0x2c>)
 800090c:	1d3a      	adds	r2, r7, #4
 800090e:	8812      	ldrh	r2, [r2, #0]
 8000910:	805a      	strh	r2, [r3, #2]
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000484 	.word	0x20000484

08000920 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6039      	str	r1, [r7, #0]
 8000928:	0011      	movs	r1, r2
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	1c02      	adds	r2, r0, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	1c0a      	adds	r2, r1, #0
 8000934:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <SSD1306_Putc+0x100>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	001a      	movs	r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	18d3      	adds	r3, r2, r3
	if (
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	dc07      	bgt.n	8000956 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <SSD1306_Putc+0x100>)
 8000948:	885b      	ldrh	r3, [r3, #2]
 800094a:	001a      	movs	r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000952:	2b3f      	cmp	r3, #63	; 0x3f
 8000954:	dd01      	ble.n	800095a <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000956:	2300      	movs	r3, #0
 8000958:	e05e      	b.n	8000a18 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e04a      	b.n	80009f6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3b20      	subs	r3, #32
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	7849      	ldrb	r1, [r1, #1]
 800096e:	434b      	muls	r3, r1
 8000970:	0019      	movs	r1, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	18cb      	adds	r3, r1, r3
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	e02f      	b.n	80009e4 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	409a      	lsls	r2, r3
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	4013      	ands	r3, r2
 8000990:	d011      	beq.n	80009b6 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <SSD1306_Putc+0x100>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	b29b      	uxth	r3, r3
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	b298      	uxth	r0, r3
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <SSD1306_Putc+0x100>)
 80009a0:	885a      	ldrh	r2, [r3, #2]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	b299      	uxth	r1, r3
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	f7ff ff30 	bl	8000814 <SSD1306_DrawPixel>
 80009b4:	e013      	b.n	80009de <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <SSD1306_Putc+0x100>)
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	b298      	uxth	r0, r3
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <SSD1306_Putc+0x100>)
 80009c4:	885a      	ldrh	r2, [r3, #2]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	b299      	uxth	r1, r3
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	425a      	negs	r2, r3
 80009d4:	4153      	adcs	r3, r2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	001a      	movs	r2, r3
 80009da:	f7ff ff1b 	bl	8000814 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	3301      	adds	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	001a      	movs	r2, r3
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d3c9      	bcc.n	8000984 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	001a      	movs	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d3ae      	bcc.n	8000960 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <SSD1306_Putc+0x100>)
 8000a04:	881a      	ldrh	r2, [r3, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	18d3      	adds	r3, r2, r3
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <SSD1306_Putc+0x100>)
 8000a12:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000484 	.word	0x20000484

08000a24 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000a32:	e013      	b.n	8000a5c <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	0019      	movs	r1, r3
 8000a40:	f7ff ff6e 	bl	8000920 <SSD1306_Putc>
 8000a44:	0003      	movs	r3, r0
 8000a46:	001a      	movs	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d002      	beq.n	8000a56 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	e008      	b.n	8000a68 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1e7      	bne.n	8000a34 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	781b      	ldrb	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b004      	add	sp, #16
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff feb3 	bl	80007e0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a7a:	f7ff fe7d 	bl	8000778 <SSD1306_UpdateScreen>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <ssd1306_I2C_Init+0x24>)
 8000a8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a8e:	e002      	b.n	8000a96 <ssd1306_I2C_Init+0x12>
		p--;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	0003d090 	.word	0x0003d090

08000aac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b0c6      	sub	sp, #280	; 0x118
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	0004      	movs	r4, r0
 8000ab4:	0008      	movs	r0, r1
 8000ab6:	603a      	str	r2, [r7, #0]
 8000ab8:	0019      	movs	r1, r3
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <ssd1306_I2C_WriteMulti+0xc4>)
 8000abc:	2588      	movs	r5, #136	; 0x88
 8000abe:	006d      	lsls	r5, r5, #1
 8000ac0:	195b      	adds	r3, r3, r5
 8000ac2:	19db      	adds	r3, r3, r7
 8000ac4:	1c22      	adds	r2, r4, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <ssd1306_I2C_WriteMulti+0xc8>)
 8000aca:	002c      	movs	r4, r5
 8000acc:	191b      	adds	r3, r3, r4
 8000ace:	19db      	adds	r3, r3, r7
 8000ad0:	1c02      	adds	r2, r0, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <ssd1306_I2C_WriteMulti+0xcc>)
 8000ad6:	0020      	movs	r0, r4
 8000ad8:	181b      	adds	r3, r3, r0
 8000ada:	19db      	adds	r3, r3, r7
 8000adc:	1c0a      	adds	r2, r1, #0
 8000ade:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <ssd1306_I2C_WriteMulti+0xd0>)
 8000ae2:	181b      	adds	r3, r3, r0
 8000ae4:	19db      	adds	r3, r3, r7
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <ssd1306_I2C_WriteMulti+0xc8>)
 8000ae8:	1812      	adds	r2, r2, r0
 8000aea:	19d2      	adds	r2, r2, r7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000af0:	2310      	movs	r3, #16
 8000af2:	33ff      	adds	r3, #255	; 0xff
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e014      	b.n	8000b26 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000afc:	2010      	movs	r0, #16
 8000afe:	30ff      	adds	r0, #255	; 0xff
 8000b00:	183b      	adds	r3, r7, r0
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	18d2      	adds	r2, r2, r3
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	7811      	ldrb	r1, [r2, #0]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <ssd1306_I2C_WriteMulti+0xd0>)
 8000b12:	2488      	movs	r4, #136	; 0x88
 8000b14:	0064      	lsls	r4, r4, #1
 8000b16:	1912      	adds	r2, r2, r4
 8000b18:	19d2      	adds	r2, r2, r7
 8000b1a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b1c:	183b      	adds	r3, r7, r0
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	183b      	adds	r3, r7, r0
 8000b22:	3201      	adds	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	2310      	movs	r3, #16
 8000b28:	33ff      	adds	r3, #255	; 0xff
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <ssd1306_I2C_WriteMulti+0xcc>)
 8000b32:	2188      	movs	r1, #136	; 0x88
 8000b34:	0049      	lsls	r1, r1, #1
 8000b36:	1852      	adds	r2, r2, r1
 8000b38:	19d2      	adds	r2, r2, r7
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8dd      	bhi.n	8000afc <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <ssd1306_I2C_WriteMulti+0xc4>)
 8000b42:	000a      	movs	r2, r1
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	19db      	adds	r3, r3, r7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <ssd1306_I2C_WriteMulti+0xcc>)
 8000b4e:	189b      	adds	r3, r3, r2
 8000b50:	19db      	adds	r3, r3, r7
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	220c      	movs	r2, #12
 8000b5a:	18ba      	adds	r2, r7, r2
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <ssd1306_I2C_WriteMulti+0xd4>)
 8000b5e:	240a      	movs	r4, #10
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	f000 fc39 	bl	80013d8 <HAL_I2C_Master_Transmit>
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b044      	add	sp, #272	; 0x110
 8000b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fffffef7 	.word	0xfffffef7
 8000b74:	fffffef6 	.word	0xfffffef6
 8000b78:	fffffef4 	.word	0xfffffef4
 8000b7c:	fffffefc 	.word	0xfffffefc
 8000b80:	20000038 	.word	0x20000038

08000b84 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	1c22      	adds	r2, r4, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	1c02      	adds	r2, r0, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	1d7b      	adds	r3, r7, #5
 8000b9e:	1c0a      	adds	r2, r1, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000ba2:	200c      	movs	r0, #12
 8000ba4:	183b      	adds	r3, r7, r0
 8000ba6:	1dba      	adds	r2, r7, #6
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	1d7a      	adds	r2, r7, #5
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b299      	uxth	r1, r3
 8000bba:	183a      	adds	r2, r7, r0
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <ssd1306_I2C_Write+0x4c>)
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f000 fc08 	bl	80013d8 <HAL_I2C_Master_Transmit>
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b005      	add	sp, #20
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	20000038 	.word	0x20000038

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	619a      	str	r2, [r3, #24]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	69da      	ldr	r2, [r3, #28]
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0549      	lsls	r1, r1, #21
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	61da      	str	r2, [r3, #28]
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_MspInit+0x44>)
 8000c02:	69da      	ldr	r2, [r3, #28]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	055b      	lsls	r3, r3, #21
 8000c08:	4013      	ands	r3, r2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	2414      	movs	r4, #20
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f001 fe36 	bl	80028a0 <memset>
  if(hi2c->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_I2C_MspInit+0x90>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d131      	bne.n	8000ca2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	02c9      	lsls	r1, r1, #11
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	02db      	lsls	r3, r3, #11
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	22c0      	movs	r2, #192	; 0xc0
 8000c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2212      	movs	r2, #18
 8000c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2203      	movs	r2, #3
 8000c72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2201      	movs	r2, #1
 8000c78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_I2C_MspInit+0x98>)
 8000c7e:	0019      	movs	r1, r3
 8000c80:	0010      	movs	r0, r2
 8000c82:	f000 f99b 	bl	8000fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0389      	lsls	r1, r1, #14
 8000c90:	430a      	orrs	r2, r1
 8000c92:	61da      	str	r2, [r3, #28]
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_I2C_MspInit+0x94>)
 8000c96:	69da      	ldr	r2, [r3, #28]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	039b      	lsls	r3, r3, #14
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b00b      	add	sp, #44	; 0x2c
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f87a 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d1a:	f7ff ffe4 	bl	8000ce6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d1e:	f001 fd7f 	bl	8002820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d22:	f7ff fa7d 	bl	8000220 <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   r0, =_estack
 8000d28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d34:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8000d38:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d3c:	20000490 	.word	0x20000490

08000d40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_COMP_IRQHandler>
	...

08000d44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_Init+0x24>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_Init+0x24>)
 8000d4e:	2110      	movs	r1, #16
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f809 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5a:	f7ff ff3b 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000d76:	681c      	ldr	r4, [r3, #0]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_InitTick+0x60>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	23fa      	movs	r3, #250	; 0xfa
 8000d80:	0098      	lsls	r0, r3, #2
 8000d82:	f7ff f9c1 	bl	8000108 <__udivsi3>
 8000d86:	0003      	movs	r3, r0
 8000d88:	0019      	movs	r1, r3
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f7ff f9bc 	bl	8000108 <__udivsi3>
 8000d90:	0003      	movs	r3, r0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 f905 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e00f      	b.n	8000dc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d80b      	bhi.n	8000dbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2301      	movs	r3, #1
 8000daa:	425b      	negs	r3, r3
 8000dac:	2200      	movs	r2, #0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f8e2 	bl	8000f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_InitTick+0x64>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	20000018 	.word	0x20000018
 8000dd0:	20000014 	.word	0x20000014

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	18d2      	adds	r2, r2, r3
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000018 	.word	0x20000018
 8000df4:	2000048c 	.word	0x2000048c

08000df8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	2000048c 	.word	0x2000048c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	189b      	adds	r3, r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	f7ff ffe0 	bl	8000df8 <HAL_GetTick>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000018 	.word	0x20000018

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b7f      	cmp	r3, #127	; 0x7f
 8000e68:	d828      	bhi.n	8000ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	33c0      	adds	r3, #192	; 0xc0
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	589b      	ldr	r3, [r3, r2]
 8000e7a:	1dfa      	adds	r2, r7, #7
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	0011      	movs	r1, r2
 8000e80:	2203      	movs	r2, #3
 8000e82:	400a      	ands	r2, r1
 8000e84:	00d2      	lsls	r2, r2, #3
 8000e86:	21ff      	movs	r1, #255	; 0xff
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	401a      	ands	r2, r3
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	4003      	ands	r3, r0
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	481f      	ldr	r0, [pc, #124]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	33c0      	adds	r3, #192	; 0xc0
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eba:	e031      	b.n	8000f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3306      	adds	r3, #6
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1dfa      	adds	r2, r7, #7
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	0011      	movs	r1, r2
 8000edc:	2203      	movs	r2, #3
 8000ede:	400a      	ands	r2, r1
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	21ff      	movs	r1, #255	; 0xff
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	401a      	ands	r2, r3
 8000eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	22ff      	movs	r2, #255	; 0xff
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	2303      	movs	r3, #3
 8000efe:	4003      	ands	r3, r0
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	001c      	movs	r4, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	4023      	ands	r3, r4
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	430a      	orrs	r2, r1
 8000f16:	3306      	adds	r3, #6
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18c3      	adds	r3, r0, r3
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	045b      	lsls	r3, r3, #17
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d301      	bcc.n	8000f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f44:	2301      	movs	r3, #1
 8000f46:	e010      	b.n	8000f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <SysTick_Config+0x44>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	2103      	movs	r1, #3
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff7c 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x44>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x44>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	210f      	movs	r1, #15
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	1c02      	adds	r2, r0, #0
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ffbf 	bl	8000f30 <SysTick_Config>
 8000fb2:	0003      	movs	r3, r0
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e155      	b.n	8001278 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x28>
 8000fe2:	e146      	b.n	8001272 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d005      	beq.n	8000ffc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d130      	bne.n	800105e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001032:	2201      	movs	r2, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	2201      	movs	r2, #1
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	4013      	ands	r3, r2
 8001066:	2b03      	cmp	r3, #3
 8001068:	d017      	beq.n	800109a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2203      	movs	r2, #3
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d123      	bne.n	80010ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2207      	movs	r2, #7
 80010b8:	4013      	ands	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2107      	movs	r1, #7
 80010d2:	400b      	ands	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	401a      	ands	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x174>
 800112e:	e0a0      	b.n	8001272 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	4b56      	ldr	r3, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	2201      	movs	r2, #1
 8001142:	4013      	ands	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x2d8>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	589b      	ldr	r3, [r3, r2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	2390      	movs	r3, #144	; 0x90
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	429a      	cmp	r2, r3
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x1ee>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_GPIO_Init+0x2dc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1ea>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_GPIO_Init+0x2e0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1e6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1e2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1de>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 800119a:	2305      	movs	r3, #5
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011aa:	2300      	movs	r3, #0
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2103      	movs	r1, #3
 80011b0:	400a      	ands	r2, r1
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2d8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	4013      	ands	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	035b      	lsls	r3, r3, #13
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	039b      	lsls	r3, r3, #14
 8001260:	4013      	ands	r3, r2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	40da      	lsrs	r2, r3
 8001280:	1e13      	subs	r3, r2, #0
 8001282:	d000      	beq.n	8001286 <HAL_GPIO_Init+0x2ca>
 8001284:	e6a2      	b.n	8000fcc <HAL_GPIO_Init+0x10>
  } 
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b006      	add	sp, #24
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e082      	b.n	80013c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2241      	movs	r2, #65	; 0x41
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	2100      	movs	r1, #0
 80012d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fca1 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2241      	movs	r2, #65	; 0x41
 80012de:	2124      	movs	r1, #36	; 0x24
 80012e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	438a      	bics	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4934      	ldr	r1, [pc, #208]	; (80013cc <HAL_I2C_Init+0x120>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4931      	ldr	r1, [pc, #196]	; (80013d0 <HAL_I2C_Init+0x124>)
 800130c:	400a      	ands	r2, r1
 800130e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0209      	lsls	r1, r1, #8
 8001324:	430a      	orrs	r2, r1
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e007      	b.n	800133a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2184      	movs	r1, #132	; 0x84
 8001334:	0209      	lsls	r1, r1, #8
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d104      	bne.n	800134c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	491f      	ldr	r1, [pc, #124]	; (80013d4 <HAL_I2C_Init+0x128>)
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	491a      	ldr	r1, [pc, #104]	; (80013d0 <HAL_I2C_Init+0x124>)
 8001368:	400a      	ands	r2, r1
 800136a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	431a      	orrs	r2, r3
 8001376:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69d9      	ldr	r1, [r3, #28]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2241      	movs	r2, #65	; 0x41
 80013b0:	2120      	movs	r1, #32
 80013b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2242      	movs	r2, #66	; 0x42
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f0ffffff 	.word	0xf0ffffff
 80013d0:	ffff7fff 	.word	0xffff7fff
 80013d4:	02008000 	.word	0x02008000

080013d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	0008      	movs	r0, r1
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	0019      	movs	r1, r3
 80013e6:	230a      	movs	r3, #10
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	801a      	strh	r2, [r3, #0]
 80013ee:	2308      	movs	r3, #8
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	1c0a      	adds	r2, r1, #0
 80013f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2241      	movs	r2, #65	; 0x41
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d000      	beq.n	8001404 <HAL_I2C_Master_Transmit+0x2c>
 8001402:	e0e7      	b.n	80015d4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Master_Transmit+0x3a>
 800140e:	2302      	movs	r3, #2
 8001410:	e0e1      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	2101      	movs	r1, #1
 8001418:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800141a:	f7ff fced 	bl	8000df8 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	0219      	lsls	r1, r3, #8
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2319      	movs	r3, #25
 800142e:	2201      	movs	r2, #1
 8001430:	f000 fa16 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0cc      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2241      	movs	r2, #65	; 0x41
 8001440:	2121      	movs	r1, #33	; 0x21
 8001442:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2242      	movs	r2, #66	; 0x42
 8001448:	2110      	movs	r1, #16
 800144a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2208      	movs	r2, #8
 800145c:	18ba      	adds	r2, r7, r2
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146c:	b29b      	uxth	r3, r3
 800146e:	2bff      	cmp	r3, #255	; 0xff
 8001470:	d911      	bls.n	8001496 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	22ff      	movs	r2, #255	; 0xff
 8001476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	b2da      	uxtb	r2, r3
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	045c      	lsls	r4, r3, #17
 8001482:	230a      	movs	r3, #10
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	8819      	ldrh	r1, [r3, #0]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_I2C_Master_Transmit+0x208>)
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	0023      	movs	r3, r4
 8001490:	f000 fb1a 	bl	8001ac8 <I2C_TransferConfig>
 8001494:	e075      	b.n	8001582 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	049c      	lsls	r4, r3, #18
 80014aa:	230a      	movs	r3, #10
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_I2C_Master_Transmit+0x208>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	0023      	movs	r3, r4
 80014b8:	f000 fb06 	bl	8001ac8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80014bc:	e061      	b.n	8001582 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 fa0a 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e081      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29b      	uxth	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03a      	beq.n	8001582 <HAL_I2C_Master_Transmit+0x1aa>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d136      	bne.n	8001582 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	0013      	movs	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	f000 f99d 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e053      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	2bff      	cmp	r3, #255	; 0xff
 8001536:	d911      	bls.n	800155c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	22ff      	movs	r2, #255	; 0xff
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	b2da      	uxtb	r2, r3
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	045c      	lsls	r4, r3, #17
 8001548:	230a      	movs	r3, #10
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	8819      	ldrh	r1, [r3, #0]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	0023      	movs	r3, r4
 8001556:	f000 fab7 	bl	8001ac8 <I2C_TransferConfig>
 800155a:	e012      	b.n	8001582 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	b2da      	uxtb	r2, r3
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	049c      	lsls	r4, r3, #18
 8001570:	230a      	movs	r3, #10
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	8819      	ldrh	r1, [r3, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	0023      	movs	r3, r4
 800157e:	f000 faa3 	bl	8001ac8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d198      	bne.n	80014be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f9e2 	bl	800195c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e01a      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2220      	movs	r2, #32
 80015a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <HAL_I2C_Master_Transmit+0x20c>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2241      	movs	r2, #65	; 0x41
 80015bc:	2120      	movs	r1, #32
 80015be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2242      	movs	r2, #66	; 0x42
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
  }
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b007      	add	sp, #28
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	80002000 	.word	0x80002000
 80015e4:	fe00e800 	.word	0xfe00e800

080015e8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	230a      	movs	r3, #10
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	1c0a      	adds	r2, r1, #0
 80015fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2241      	movs	r2, #65	; 0x41
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b20      	cmp	r3, #32
 800160a:	d000      	beq.n	800160e <HAL_I2C_IsDeviceReady+0x26>
 800160c:	e0fe      	b.n	800180c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	401a      	ands	r2, r3
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	429a      	cmp	r2, r3
 8001620:	d101      	bne.n	8001626 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	e0f3      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2240      	movs	r2, #64	; 0x40
 800162a:	5c9b      	ldrb	r3, [r3, r2]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_I2C_IsDeviceReady+0x4c>
 8001630:	2302      	movs	r3, #2
 8001632:	e0ec      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	2101      	movs	r1, #1
 800163a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2241      	movs	r2, #65	; 0x41
 8001640:	2124      	movs	r1, #36	; 0x24
 8001642:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_I2C_IsDeviceReady+0x7a>
 8001652:	230a      	movs	r3, #10
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	059b      	lsls	r3, r3, #22
 800165a:	0d9b      	lsrs	r3, r3, #22
 800165c:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_I2C_IsDeviceReady+0x230>)
 800165e:	431a      	orrs	r2, r3
 8001660:	e007      	b.n	8001672 <HAL_I2C_IsDeviceReady+0x8a>
 8001662:	230a      	movs	r3, #10
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	059b      	lsls	r3, r3, #22
 800166a:	0d9b      	lsrs	r3, r3, #22
 800166c:	22a0      	movs	r2, #160	; 0xa0
 800166e:	0192      	lsls	r2, r2, #6
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fbbe 	bl	8000df8 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2220      	movs	r2, #32
 8001688:	4013      	ands	r3, r2
 800168a:	3b20      	subs	r3, #32
 800168c:	425a      	negs	r2, r3
 800168e:	4153      	adcs	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	231f      	movs	r3, #31
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2210      	movs	r2, #16
 80016a0:	4013      	ands	r3, r2
 80016a2:	3b10      	subs	r3, #16
 80016a4:	425a      	negs	r2, r3
 80016a6:	4153      	adcs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	231e      	movs	r3, #30
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016b0:	e035      	b.n	800171e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	d01a      	beq.n	80016ee <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016b8:	f7ff fb9e 	bl	8000df8 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d302      	bcc.n	80016ce <HAL_I2C_IsDeviceReady+0xe6>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2241      	movs	r2, #65	; 0x41
 80016d2:	2120      	movs	r1, #32
 80016d4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	2220      	movs	r2, #32
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e08f      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2220      	movs	r2, #32
 80016f6:	4013      	ands	r3, r2
 80016f8:	3b20      	subs	r3, #32
 80016fa:	425a      	negs	r2, r3
 80016fc:	4153      	adcs	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	231f      	movs	r3, #31
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2210      	movs	r2, #16
 800170e:	4013      	ands	r3, r2
 8001710:	3b10      	subs	r3, #16
 8001712:	425a      	negs	r2, r3
 8001714:	4153      	adcs	r3, r2
 8001716:	b2da      	uxtb	r2, r3
 8001718:	231e      	movs	r3, #30
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800171e:	231f      	movs	r3, #31
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_I2C_IsDeviceReady+0x14a>
 8001728:	231e      	movs	r3, #30
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0bf      	beq.n	80016b2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2210      	movs	r2, #16
 800173a:	4013      	ands	r3, r2
 800173c:	2b10      	cmp	r3, #16
 800173e:	d01a      	beq.n	8001776 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	0013      	movs	r3, r2
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	f000 f887 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e059      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2220      	movs	r2, #32
 8001760:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2241      	movs	r2, #65	; 0x41
 8001766:	2120      	movs	r1, #32
 8001768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2240      	movs	r2, #64	; 0x40
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e04b      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	0013      	movs	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	2120      	movs	r1, #32
 8001784:	f000 f86c 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e03e      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2220      	movs	r2, #32
 800179e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d119      	bne.n	80017dc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	01c9      	lsls	r1, r1, #7
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	0013      	movs	r3, r2
 80017c4:	2200      	movs	r2, #0
 80017c6:	2120      	movs	r1, #32
 80017c8:	f000 f84a 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e01c      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2220      	movs	r2, #32
 80017da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d900      	bls.n	80017ec <HAL_I2C_IsDeviceReady+0x204>
 80017ea:	e72e      	b.n	800164a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2241      	movs	r2, #65	; 0x41
 80017f0:	2120      	movs	r1, #32
 80017f2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	2220      	movs	r2, #32
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800180c:	2302      	movs	r3, #2
  }
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b008      	add	sp, #32
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	02002000 	.word	0x02002000

0800181c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d103      	bne.n	800183a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d007      	beq.n	8001858 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	619a      	str	r2, [r3, #24]
  }
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001870:	e021      	b.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	d01e      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001878:	f7ff fabe 	bl	8000df8 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d302      	bcc.n	800188e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d113      	bne.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	2220      	movs	r2, #32
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2241      	movs	r2, #65	; 0x41
 800189e:	2120      	movs	r1, #32
 80018a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2242      	movs	r2, #66	; 0x42
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4013      	ands	r3, r2
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	425a      	negs	r2, r3
 80018c6:	4153      	adcs	r3, r2
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	001a      	movs	r2, r3
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d0ce      	beq.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}

080018de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018ea:	e02b      	b.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f86e 	bl	80019d4 <I2C_IsAcknowledgeFailed>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e029      	b.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3301      	adds	r3, #1
 8001904:	d01e      	beq.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001906:	f7ff fa77 	bl	8000df8 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	429a      	cmp	r2, r3
 8001914:	d302      	bcc.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d113      	bne.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	2220      	movs	r2, #32
 8001922:	431a      	orrs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2241      	movs	r2, #65	; 0x41
 800192c:	2120      	movs	r1, #32
 800192e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2242      	movs	r2, #66	; 0x42
 8001934:	2100      	movs	r1, #0
 8001936:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	2100      	movs	r1, #0
 800193e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e007      	b.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d1cc      	bne.n	80018ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001968:	e028      	b.n	80019bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f82f 	bl	80019d4 <I2C_IsAcknowledgeFailed>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e026      	b.n	80019cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197e:	f7ff fa3b 	bl	8000df8 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	429a      	cmp	r2, r3
 800198c:	d302      	bcc.n	8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d113      	bne.n	80019bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	2220      	movs	r2, #32
 800199a:	431a      	orrs	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	2120      	movs	r1, #32
 80019a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2242      	movs	r2, #66	; 0x42
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2220      	movs	r2, #32
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d1cf      	bne.n	800196a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2210      	movs	r2, #16
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d164      	bne.n	8001ab8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	049b      	lsls	r3, r3, #18
 80019f8:	401a      	ands	r2, r3
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d02b      	beq.n	8001a5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	01c9      	lsls	r1, r1, #7
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a14:	e021      	b.n	8001a5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	d01e      	beq.n	8001a5a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1c:	f7ff f9ec 	bl	8000df8 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d302      	bcc.n	8001a32 <I2C_IsAcknowledgeFailed+0x5e>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d113      	bne.n	8001a5a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	2220      	movs	r2, #32
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2241      	movs	r2, #65	; 0x41
 8001a42:	2120      	movs	r1, #32
 8001a44:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2242      	movs	r2, #66	; 0x42
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e02f      	b.n	8001aba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2220      	movs	r2, #32
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d1d6      	bne.n	8001a16 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2220      	movs	r2, #32
 8001a76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fece 	bl	800181c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <I2C_IsAcknowledgeFailed+0xf0>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2204      	movs	r2, #4
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2241      	movs	r2, #65	; 0x41
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2242      	movs	r2, #66	; 0x42
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	fe00e800 	.word	0xfe00e800

08001ac8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	0008      	movs	r0, r1
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	240a      	movs	r4, #10
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	1c02      	adds	r2, r0, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	2009      	movs	r0, #9
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	1c0a      	adds	r2, r1, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	0d51      	lsrs	r1, r2, #21
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	400a      	ands	r2, r1
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <I2C_TransferConfig+0x68>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	43d2      	mvns	r2, r2
 8001afc:	401a      	ands	r2, r3
 8001afe:	0011      	movs	r1, r2
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	0d9a      	lsrs	r2, r3, #22
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	0418      	lsls	r0, r3, #16
 8001b0e:	23ff      	movs	r3, #255	; 0xff
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	4003      	ands	r3, r0
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b005      	add	sp, #20
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	03ff63ff 	.word	0x03ff63ff

08001b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2241      	movs	r2, #65	; 0x41
 8001b42:	5c9b      	ldrb	r3, [r3, r2]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d138      	bne.n	8001bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e032      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2241      	movs	r2, #65	; 0x41
 8001b64:	2124      	movs	r1, #36	; 0x24
 8001b66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4911      	ldr	r1, [pc, #68]	; (8001bc8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2241      	movs	r2, #65	; 0x41
 8001bac:	2120      	movs	r1, #32
 8001bae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	ffffefff 	.word	0xffffefff

08001bcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2241      	movs	r2, #65	; 0x41
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d139      	bne.n	8001c56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2240      	movs	r2, #64	; 0x40
 8001be6:	5c9b      	ldrb	r3, [r3, r2]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e033      	b.n	8001c58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2241      	movs	r2, #65	; 0x41
 8001bfc:	2124      	movs	r1, #36	; 0x24
 8001bfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2241      	movs	r2, #65	; 0x41
 8001c46:	2120      	movs	r1, #32
 8001c48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	fffff0ff 	.word	0xfffff0ff

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 fb76 	bl	8002364 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d100      	bne.n	8001c84 <HAL_RCC_OscConfig+0x20>
 8001c82:	e08e      	b.n	8001da2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c84:	4bc5      	ldr	r3, [pc, #788]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	220c      	movs	r2, #12
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d00e      	beq.n	8001cae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c90:	4bc2      	ldr	r3, [pc, #776]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	220c      	movs	r2, #12
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d117      	bne.n	8001ccc <HAL_RCC_OscConfig+0x68>
 8001c9c:	4bbf      	ldr	r3, [pc, #764]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d10e      	bne.n	8001ccc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4bbb      	ldr	r3, [pc, #748]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_OscConfig+0x58>
 8001cba:	e071      	b.n	8001da0 <HAL_RCC_OscConfig+0x13c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d000      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x62>
 8001cc4:	e06c      	b.n	8001da0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f000 fb4c 	bl	8002364 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x80>
 8001cd4:	4bb1      	ldr	r3, [pc, #708]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4bb0      	ldr	r3, [pc, #704]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e02f      	b.n	8001d44 <HAL_RCC_OscConfig+0xe0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0xa2>
 8001cec:	4bab      	ldr	r3, [pc, #684]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4baa      	ldr	r3, [pc, #680]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cf2:	49ab      	ldr	r1, [pc, #684]	; (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4ba8      	ldr	r3, [pc, #672]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4ba7      	ldr	r3, [pc, #668]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001cfe:	49a9      	ldr	r1, [pc, #676]	; (8001fa4 <HAL_RCC_OscConfig+0x340>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e01e      	b.n	8001d44 <HAL_RCC_OscConfig+0xe0>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10e      	bne.n	8001d2c <HAL_RCC_OscConfig+0xc8>
 8001d0e:	4ba3      	ldr	r3, [pc, #652]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4ba2      	ldr	r3, [pc, #648]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	02c9      	lsls	r1, r1, #11
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4b9f      	ldr	r3, [pc, #636]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b9e      	ldr	r3, [pc, #632]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	0249      	lsls	r1, r1, #9
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xe0>
 8001d2c:	4b9b      	ldr	r3, [pc, #620]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b9a      	ldr	r3, [pc, #616]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d32:	499b      	ldr	r1, [pc, #620]	; (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4b98      	ldr	r3, [pc, #608]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d3e:	4999      	ldr	r1, [pc, #612]	; (8001fa4 <HAL_RCC_OscConfig+0x340>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d014      	beq.n	8001d76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f854 	bl	8000df8 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d56:	f7ff f84f 	bl	8000df8 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e2fd      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0xf2>
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff f83f 	bl	8000df8 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f83a 	bl	8000df8 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e2e8      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x11c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_RCC_OscConfig+0x14a>
 8001dac:	e06c      	b.n	8001e88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dae:	4b7b      	ldr	r3, [pc, #492]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	220c      	movs	r2, #12
 8001db4:	4013      	ands	r3, r2
 8001db6:	d00e      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db8:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d11f      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1a0>
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	025b      	lsls	r3, r3, #9
 8001dcc:	401a      	ands	r2, r3
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x188>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e2bb      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	22f8      	movs	r2, #248	; 0xf8
 8001df2:	4393      	bics	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00da      	lsls	r2, r3, #3
 8001dfc:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e041      	b.n	8001e88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d024      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe ffee 	bl	8000df8 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe ffe9 	bl	8000df8 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e297      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d0f1      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	22f8      	movs	r2, #248	; 0xf8
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00da      	lsls	r2, r3, #3
 8001e4e:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e018      	b.n	8001e88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	438a      	bics	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe ffc9 	bl	8000df8 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7fe ffc4 	bl	8000df8 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e272      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d1f1      	bne.n	8001e6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d036      	beq.n	8001f00 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ffa7 	bl	8000df8 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7fe ffa2 	bl	8000df8 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e250      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f1      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
 8001ecc:	e018      	b.n	8001f00 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff8d 	bl	8000df8 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ff88 	bl	8000df8 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e236      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d1f1      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2204      	movs	r2, #4
 8001f06:	4013      	ands	r3, r2
 8001f08:	d100      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2a8>
 8001f0a:	e0b5      	b.n	8002078 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	201f      	movs	r0, #31
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	055b      	lsls	r3, r3, #21
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d110      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	0549      	lsls	r1, r1, #21
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	055b      	lsls	r3, r3, #21
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe ff4c 	bl	8000df8 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7fe ff47 	bl	8000df8 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1f5      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10f      	bne.n	8001fac <HAL_RCC_OscConfig+0x348>
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
 8001f98:	e036      	b.n	8002008 <HAL_RCC_OscConfig+0x3a4>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	fffeffff 	.word	0xfffeffff
 8001fa4:	fffbffff 	.word	0xfffbffff
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x36a>
 8001fb4:	4bca      	ldr	r3, [pc, #808]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bc9      	ldr	r3, [pc, #804]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4bc7      	ldr	r3, [pc, #796]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4bc6      	ldr	r3, [pc, #792]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	621a      	str	r2, [r3, #32]
 8001fcc:	e01c      	b.n	8002008 <HAL_RCC_OscConfig+0x3a4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x38c>
 8001fd6:	4bc2      	ldr	r3, [pc, #776]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4bc1      	ldr	r3, [pc, #772]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	2104      	movs	r1, #4
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	4bbf      	ldr	r3, [pc, #764]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4bbe      	ldr	r3, [pc, #760]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	621a      	str	r2, [r3, #32]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x3a4>
 8001ff0:	4bbb      	ldr	r3, [pc, #748]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4bba      	ldr	r3, [pc, #744]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	4bb8      	ldr	r3, [pc, #736]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	4bb7      	ldr	r3, [pc, #732]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002002:	2104      	movs	r1, #4
 8002004:	438a      	bics	r2, r1
 8002006:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7fe fef2 	bl	8000df8 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe feed 	bl	8000df8 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4aaf      	ldr	r2, [pc, #700]	; (80022e4 <HAL_RCC_OscConfig+0x680>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e19a      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	4bac      	ldr	r3, [pc, #688]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x3b6>
 8002038:	e013      	b.n	8002062 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fedd 	bl	8000df8 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7fe fed8 	bl	8000df8 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4aa5      	ldr	r2, [pc, #660]	; (80022e4 <HAL_RCC_OscConfig+0x680>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e185      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4ba1      	ldr	r3, [pc, #644]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b9c      	ldr	r3, [pc, #624]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	4b9b      	ldr	r3, [pc, #620]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002072:	499d      	ldr	r1, [pc, #628]	; (80022e8 <HAL_RCC_OscConfig+0x684>)
 8002074:	400a      	ands	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	4013      	ands	r3, r2
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800208a:	4b95      	ldr	r3, [pc, #596]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002090:	2104      	movs	r1, #4
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002096:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fea9 	bl	8000df8 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ac:	f7fe fea4 	bl	8000df8 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e152      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c8:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e034      	b.n	800214a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	3305      	adds	r3, #5
 80020e6:	d111      	bne.n	800210c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020e8:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f4:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	22f8      	movs	r2, #248	; 0xf8
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	00da      	lsls	r2, r3, #3
 8002104:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
 800210a:	e01e      	b.n	800214a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800210c:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002112:	2104      	movs	r1, #4
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002118:	4b71      	ldr	r3, [pc, #452]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe fe68 	bl	8000df8 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800212e:	f7fe fe63 	bl	8000df8 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e111      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002140:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2220      	movs	r2, #32
 8002150:	4013      	ands	r3, r2
 8002152:	d05c      	beq.n	800220e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	220c      	movs	r2, #12
 800215a:	4013      	ands	r3, r2
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d00e      	beq.n	800217e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002160:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002168:	2b08      	cmp	r3, #8
 800216a:	d114      	bne.n	8002196 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800216c:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23c0      	movs	r3, #192	; 0xc0
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	401a      	ands	r2, r3
 8002176:	23c0      	movs	r3, #192	; 0xc0
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	429a      	cmp	r2, r3
 800217c:	d10b      	bne.n	8002196 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	4013      	ands	r3, r2
 8002188:	d040      	beq.n	800220c <HAL_RCC_OscConfig+0x5a8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d03c      	beq.n	800220c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0e6      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0249      	lsls	r1, r1, #9
 80021a8:	430a      	orrs	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe24 	bl	8000df8 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b6:	f7fe fe1f 	bl	8000df8 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0cd      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021c8:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	025b      	lsls	r3, r3, #9
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x552>
 80021d4:	e01b      	b.n	800220e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021d6:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80021dc:	4943      	ldr	r1, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x688>)
 80021de:	400a      	ands	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fe09 	bl	8000df8 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ec:	f7fe fe04 	bl	8000df8 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b2      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x588>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800220c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	d100      	bne.n	8002218 <HAL_RCC_OscConfig+0x5b4>
 8002216:	e0a4      	b.n	8002362 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	220c      	movs	r2, #12
 800221e:	4013      	ands	r3, r2
 8002220:	2b08      	cmp	r3, #8
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x5c2>
 8002224:	e078      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2b02      	cmp	r3, #2
 800222c:	d14c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002234:	492e      	ldr	r1, [pc, #184]	; (80022f0 <HAL_RCC_OscConfig+0x68c>)
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fddd 	bl	8000df8 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fdd8 	bl	8000df8 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e086      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	049b      	lsls	r3, r3, #18
 800225e:	4013      	ands	r3, r2
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	220f      	movs	r2, #15
 8002268:	4393      	bics	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_RCC_OscConfig+0x690>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	431a      	orrs	r2, r3
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	0449      	lsls	r1, r1, #17
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe fdab 	bl	8000df8 <HAL_GetTick>
 80022a2:	0003      	movs	r3, r0
 80022a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fda6 	bl	8000df8 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e054      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	049b      	lsls	r3, r3, #18
 80022c2:	4013      	ands	r3, r2
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x644>
 80022c6:	e04c      	b.n	8002362 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x68c>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd90 	bl	8000df8 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x6a6>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	efffffff 	.word	0xefffffff
 80022ec:	fffeffff 	.word	0xfffeffff
 80022f0:	feffffff 	.word	0xfeffffff
 80022f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fd7e 	bl	8000df8 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e02c      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_RCC_OscConfig+0x708>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	4013      	ands	r3, r2
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x694>
 8002316:	e024      	b.n	8002362 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01f      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x708>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x708>)
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	23c0      	movs	r3, #192	; 0xc0
 8002334:	025b      	lsls	r3, r3, #9
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	429a      	cmp	r2, r3
 800233e:	d10e      	bne.n	800235e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	220f      	movs	r2, #15
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d107      	bne.n	800235e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	23f0      	movs	r3, #240	; 0xf0
 8002352:	039b      	lsls	r3, r3, #14
 8002354:	401a      	ands	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b008      	add	sp, #32
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0bf      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	4013      	ands	r3, r2
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d911      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	4393      	bics	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0a6      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d015      	beq.n	80023ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2204      	movs	r2, #4
 80023c6:	4013      	ands	r3, r2
 80023c8:	d006      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	21e0      	movs	r1, #224	; 0xe0
 80023d2:	00c9      	lsls	r1, r1, #3
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	22f0      	movs	r2, #240	; 0xf0
 80023de:	4393      	bics	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	d04c      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	4013      	ands	r3, r2
 8002408:	d120      	bne.n	800244c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07a      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	049b      	lsls	r3, r3, #18
 800241e:	4013      	ands	r3, r2
 8002420:	d114      	bne.n	800244c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06e      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800242e:	4b38      	ldr	r3, [pc, #224]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 8002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	4013      	ands	r3, r2
 8002438:	d108      	bne.n	800244c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e062      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e05b      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	4393      	bics	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fcca 	bl	8000df8 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002468:	e009      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7fe fcc5 	bl	8000df8 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1a4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e042      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	220c      	movs	r2, #12
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1ec      	bne.n	800246a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d211      	bcs.n	80024c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4393      	bics	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_RCC_ClockConfig+0x19c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e020      	b.n	8002504 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2204      	movs	r2, #4
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <HAL_RCC_ClockConfig+0x1a8>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024e0:	f000 f820 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e4:	0001      	movs	r1, r0
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1a0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	220f      	movs	r2, #15
 80024ee:	4013      	ands	r3, r2
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1ac>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	000a      	movs	r2, r1
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 80024fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7fe fc35 	bl	8000d6c <HAL_InitTick>
  
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	00001388 	.word	0x00001388
 8002518:	fffff8ff 	.word	0xfffff8ff
 800251c:	08004a38 	.word	0x08004a38
 8002520:	20000010 	.word	0x20000010

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08f      	sub	sp, #60	; 0x3c
 8002528:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800252a:	2314      	movs	r3, #20
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_RCC_GetSysClockFreq+0xec>)
 8002530:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002532:	c313      	stmia	r3!, {r0, r1, r4}
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4a36      	ldr	r2, [pc, #216]	; (8002614 <HAL_RCC_GetSysClockFreq+0xf0>)
 800253c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800253e:	c313      	stmia	r3!, {r0, r1, r4}
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_GetSysClockFreq+0xf4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	220c      	movs	r2, #12
 8002562:	4013      	ands	r3, r2
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d047      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0xd4>
 8002568:	d849      	bhi.n	80025fe <HAL_RCC_GetSysClockFreq+0xda>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x50>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x56>
 8002572:	e044      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002578:	e044      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	220f      	movs	r2, #15
 8002580:	4013      	ands	r3, r2
 8002582:	2214      	movs	r2, #20
 8002584:	18ba      	adds	r2, r7, r2
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xf4>)
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	220f      	movs	r2, #15
 8002590:	4013      	ands	r3, r2
 8002592:	1d3a      	adds	r2, r7, #4
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259a:	23c0      	movs	r3, #192	; 0xc0
 800259c:	025b      	lsls	r3, r3, #9
 800259e:	401a      	ands	r2, r3
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025aa:	481c      	ldr	r0, [pc, #112]	; (800261c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ac:	f7fd fdac 	bl	8000108 <__udivsi3>
 80025b0:	0003      	movs	r3, r0
 80025b2:	001a      	movs	r2, r3
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	4353      	muls	r3, r2
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ba:	e01a      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	23c0      	movs	r3, #192	; 0xc0
 80025c0:	025b      	lsls	r3, r3, #9
 80025c2:	401a      	ands	r2, r3
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d109      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ce:	4814      	ldr	r0, [pc, #80]	; (8002620 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025d0:	f7fd fd9a 	bl	8000108 <__udivsi3>
 80025d4:	0003      	movs	r3, r0
 80025d6:	001a      	movs	r2, r3
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	4353      	muls	r3, r2
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	e008      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e2:	480e      	ldr	r0, [pc, #56]	; (800261c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e4:	f7fd fd90 	bl	8000108 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	001a      	movs	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	4353      	muls	r3, r2
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025f6:	e005      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025fc:	e002      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002602:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b00f      	add	sp, #60	; 0x3c
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	08002970 	.word	0x08002970
 8002614:	08002980 	.word	0x08002980
 8002618:	40021000 	.word	0x40021000
 800261c:	007a1200 	.word	0x007a1200
 8002620:	02dc6c00 	.word	0x02dc6c00

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	025b      	lsls	r3, r3, #9
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002640:	e08e      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2017      	movs	r0, #23
 8002644:	183b      	adds	r3, r7, r0
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	055b      	lsls	r3, r3, #21
 8002652:	4013      	ands	r3, r2
 8002654:	d110      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0549      	lsls	r1, r1, #21
 8002660:	430a      	orrs	r2, r1
 8002662:	61da      	str	r2, [r3, #28]
 8002664:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	055b      	lsls	r3, r3, #21
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	183b      	adds	r3, r7, r0
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d11a      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002684:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0049      	lsls	r1, r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fbb1 	bl	8000df8 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	e008      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fbac 	bl	8000df8 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0a6      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	d0f0      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ba:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	23c0      	movs	r3, #192	; 0xc0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d034      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	23c0      	movs	r3, #192	; 0xc0
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d02c      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026dc:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	4b46      	ldr	r3, [pc, #280]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0249      	lsls	r1, r1, #9
 80026f0:	430a      	orrs	r2, r1
 80026f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026fa:	4945      	ldr	r1, [pc, #276]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fb73 	bl	8000df8 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e009      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fb6e 	bl	8000df8 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	4a3c      	ldr	r2, [pc, #240]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002746:	430a      	orrs	r2, r1
 8002748:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800274a:	2317      	movs	r3, #23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800275a:	492f      	ldr	r1, [pc, #188]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800275c:	400a      	ands	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2203      	movs	r2, #3
 8002770:	4393      	bics	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277a:	430a      	orrs	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002798:	430a      	orrs	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2220      	movs	r2, #32
 80027a2:	4013      	ands	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	2210      	movs	r2, #16
 80027ac:	4393      	bics	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	4013      	ands	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	4393      	bics	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4013      	ands	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	4393      	bics	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b006      	add	sp, #24
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	fffffcff 	.word	0xfffffcff
 8002810:	fffeffff 	.word	0xfffeffff
 8002814:	00001388 	.word	0x00001388
 8002818:	efffffff 	.word	0xefffffff
 800281c:	fffcffff 	.word	0xfffcffff

08002820 <__libc_init_array>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	2600      	movs	r6, #0
 8002824:	4d0c      	ldr	r5, [pc, #48]	; (8002858 <__libc_init_array+0x38>)
 8002826:	4c0d      	ldr	r4, [pc, #52]	; (800285c <__libc_init_array+0x3c>)
 8002828:	1b64      	subs	r4, r4, r5
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	42a6      	cmp	r6, r4
 800282e:	d109      	bne.n	8002844 <__libc_init_array+0x24>
 8002830:	2600      	movs	r6, #0
 8002832:	f000 f87d 	bl	8002930 <_init>
 8002836:	4d0a      	ldr	r5, [pc, #40]	; (8002860 <__libc_init_array+0x40>)
 8002838:	4c0a      	ldr	r4, [pc, #40]	; (8002864 <__libc_init_array+0x44>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	42a6      	cmp	r6, r4
 8002840:	d105      	bne.n	800284e <__libc_init_array+0x2e>
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	00b3      	lsls	r3, r6, #2
 8002846:	58eb      	ldr	r3, [r5, r3]
 8002848:	4798      	blx	r3
 800284a:	3601      	adds	r6, #1
 800284c:	e7ee      	b.n	800282c <__libc_init_array+0xc>
 800284e:	00b3      	lsls	r3, r6, #2
 8002850:	58eb      	ldr	r3, [r5, r3]
 8002852:	4798      	blx	r3
 8002854:	3601      	adds	r6, #1
 8002856:	e7f2      	b.n	800283e <__libc_init_array+0x1e>
 8002858:	08004a70 	.word	0x08004a70
 800285c:	08004a70 	.word	0x08004a70
 8002860:	08004a70 	.word	0x08004a70
 8002864:	08004a74 	.word	0x08004a74

08002868 <__itoa>:
 8002868:	1e93      	subs	r3, r2, #2
 800286a:	b510      	push	{r4, lr}
 800286c:	000c      	movs	r4, r1
 800286e:	2b22      	cmp	r3, #34	; 0x22
 8002870:	d904      	bls.n	800287c <__itoa+0x14>
 8002872:	2300      	movs	r3, #0
 8002874:	001c      	movs	r4, r3
 8002876:	700b      	strb	r3, [r1, #0]
 8002878:	0020      	movs	r0, r4
 800287a:	bd10      	pop	{r4, pc}
 800287c:	2a0a      	cmp	r2, #10
 800287e:	d109      	bne.n	8002894 <__itoa+0x2c>
 8002880:	2800      	cmp	r0, #0
 8002882:	da07      	bge.n	8002894 <__itoa+0x2c>
 8002884:	232d      	movs	r3, #45	; 0x2d
 8002886:	700b      	strb	r3, [r1, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4240      	negs	r0, r0
 800288c:	1861      	adds	r1, r4, r1
 800288e:	f000 f80f 	bl	80028b0 <__utoa>
 8002892:	e7f1      	b.n	8002878 <__itoa+0x10>
 8002894:	2100      	movs	r1, #0
 8002896:	e7f9      	b.n	800288c <__itoa+0x24>

08002898 <itoa>:
 8002898:	b510      	push	{r4, lr}
 800289a:	f7ff ffe5 	bl	8002868 <__itoa>
 800289e:	bd10      	pop	{r4, pc}

080028a0 <memset>:
 80028a0:	0003      	movs	r3, r0
 80028a2:	1882      	adds	r2, r0, r2
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	7019      	strb	r1, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <__utoa>:
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	000c      	movs	r4, r1
 80028b4:	0016      	movs	r6, r2
 80028b6:	b08d      	sub	sp, #52	; 0x34
 80028b8:	2225      	movs	r2, #37	; 0x25
 80028ba:	0007      	movs	r7, r0
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <__utoa+0x68>)
 80028be:	a802      	add	r0, sp, #8
 80028c0:	f000 f82c 	bl	800291c <memcpy>
 80028c4:	1e62      	subs	r2, r4, #1
 80028c6:	9200      	str	r2, [sp, #0]
 80028c8:	1eb3      	subs	r3, r6, #2
 80028ca:	aa02      	add	r2, sp, #8
 80028cc:	2500      	movs	r5, #0
 80028ce:	9201      	str	r2, [sp, #4]
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	d904      	bls.n	80028de <__utoa+0x2e>
 80028d4:	7025      	strb	r5, [r4, #0]
 80028d6:	002c      	movs	r4, r5
 80028d8:	0020      	movs	r0, r4
 80028da:	b00d      	add	sp, #52	; 0x34
 80028dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028de:	0038      	movs	r0, r7
 80028e0:	0031      	movs	r1, r6
 80028e2:	f7fd fc97 	bl	8000214 <__aeabi_uidivmod>
 80028e6:	000b      	movs	r3, r1
 80028e8:	9a01      	ldr	r2, [sp, #4]
 80028ea:	0029      	movs	r1, r5
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	9a00      	ldr	r2, [sp, #0]
 80028f0:	3501      	adds	r5, #1
 80028f2:	5553      	strb	r3, [r2, r5]
 80028f4:	003b      	movs	r3, r7
 80028f6:	0007      	movs	r7, r0
 80028f8:	429e      	cmp	r6, r3
 80028fa:	d9f0      	bls.n	80028de <__utoa+0x2e>
 80028fc:	2300      	movs	r3, #0
 80028fe:	0022      	movs	r2, r4
 8002900:	5563      	strb	r3, [r4, r5]
 8002902:	000b      	movs	r3, r1
 8002904:	1ac8      	subs	r0, r1, r3
 8002906:	4283      	cmp	r3, r0
 8002908:	dde6      	ble.n	80028d8 <__utoa+0x28>
 800290a:	7810      	ldrb	r0, [r2, #0]
 800290c:	5ce5      	ldrb	r5, [r4, r3]
 800290e:	7015      	strb	r5, [r2, #0]
 8002910:	54e0      	strb	r0, [r4, r3]
 8002912:	3201      	adds	r2, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	e7f5      	b.n	8002904 <__utoa+0x54>
 8002918:	08004a48 	.word	0x08004a48

0800291c <memcpy>:
 800291c:	2300      	movs	r3, #0
 800291e:	b510      	push	{r4, lr}
 8002920:	429a      	cmp	r2, r3
 8002922:	d100      	bne.n	8002926 <memcpy+0xa>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	5ccc      	ldrb	r4, [r1, r3]
 8002928:	54c4      	strb	r4, [r0, r3]
 800292a:	3301      	adds	r3, #1
 800292c:	e7f8      	b.n	8002920 <memcpy+0x4>
	...

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
